import { doc, getDoc, setDoc, serverTimestamp } from "firebase/firestore";
import { db } from "../configs/firebase";
import { Doctor } from "@/app/modules/hospital/types/doctor";
import { Patient } from "@/app/modules/hospital/types/patient";

/**
 * T·∫°o ho·∫∑c l·∫•y conversation gi·ªØa b√°c sƒ© v√† b·ªánh nh√¢n
 * @param {Object} doctor - th√¥ng tin b√°c sƒ© (id, name, email, avatar)
 * @param {Object} patient - th√¥ng tin b·ªánh nh√¢n (id, name, email, avatar)
 * @param {string} appointmentId - id c·ªßa cu·ªôc h·∫πn (tu·ª≥ ch·ªçn)
 * @returns {Promise<string>} conversationId
 */
export async function createOrGetConversation(
  doctor: Doctor,
  patient: Patient,
  appointmentId: string | null = null,
) {
  if (!doctor?.doctor_id || !patient?.patient_id) {
    throw new Error("Missing doctor or patient ID");
  }

  // ConversationId c√≥ th·ªÉ d·ª±a v√†o c·∫∑p doctorId_patientId ƒë·ªÉ kh√¥ng tr√πng
  const conversationId = `conv_${doctor.doctor_id}_${patient.patient_id}`;

  const conversationRef = doc(db, "conversations", conversationId);
  const conversationSnap = await getDoc(conversationRef);

  if (conversationSnap.exists()) {
    // üîÑ N·∫øu ƒë√£ c√≥ ‚Üí ch·ªâ update l·∫°i th√¥ng tin m·ªõi (n·∫øu c√≥)
    await setDoc(
      conversationRef,
      {
        lastAppointmentId: appointmentId || conversationSnap.data().lastAppointmentId,
        updatedAt: serverTimestamp(),
      },
      { merge: true },
    );
  } else {
    // üÜï N·∫øu ch∆∞a c√≥ ‚Üí t·∫°o m·ªõi
    await setDoc(conversationRef, {
      participants: [doctor.doctor_id, patient.patient_id],
      doctorInfo: {
        id: doctor.doctor_id,
        name: doctor.full_name,
        avatar: doctor.image || "",
        email: doctor.email || "",
      },
      patientInfo: {
        id: patient.patient_id,
        name: patient.full_name,
        avatar: patient.image || "",
        email: patient.email || "",
      },
      lastAppointmentId: appointmentId || null,
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp(),
    });
  }

  return conversationId;
}
